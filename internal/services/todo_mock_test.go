// Code generated by MockGen. DO NOT EDIT.
// Source: todo.go
//
// Generated by this command:
//
//	mockgen -destination=todo_mock_test.go -source=todo.go -package=services_test
//
// Package services_test is a generated GoMock package.
package services_test

import (
	context "context"
	reflect "reflect"

	known "github.com/scriptdealer/to-do-go/known"
	gomock "go.uber.org/mock/gomock"
)

// MockTodoLogic is a mock of TodoLogic interface.
type MockTodoLogic struct {
	ctrl     *gomock.Controller
	recorder *MockTodoLogicMockRecorder
}

// MockTodoLogicMockRecorder is the mock recorder for MockTodoLogic.
type MockTodoLogicMockRecorder struct {
	mock *MockTodoLogic
}

// NewMockTodoLogic creates a new mock instance.
func NewMockTodoLogic(ctrl *gomock.Controller) *MockTodoLogic {
	mock := &MockTodoLogic{ctrl: ctrl}
	mock.recorder = &MockTodoLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoLogic) EXPECT() *MockTodoLogicMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoLogic) Create(title, description string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", title, description)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTodoLogicMockRecorder) Create(title, description any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoLogic)(nil).Create), title, description)
}

// Delete mocks base method.
func (m *MockTodoLogic) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoLogicMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoLogic)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockTodoLogic) Get(id int) (*known.TodoItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*known.TodoItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTodoLogicMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTodoLogic)(nil).Get), id)
}

// GetAll mocks base method.
func (m *MockTodoLogic) GetAll(ctx context.Context) ([]*known.TodoItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]*known.TodoItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTodoLogicMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTodoLogic)(nil).GetAll), ctx)
}

// Update mocks base method.
func (m *MockTodoLogic) Update(id int, title, description string, done bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, title, description, done)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTodoLogicMockRecorder) Update(id, title, description, done any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoLogic)(nil).Update), id, title, description, done)
}
